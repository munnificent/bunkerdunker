# utils/achievement_utils.py

import logging
from typing import List
from sqlalchemy.orm import Session
from telebot import TeleBot

from models import Player, Achievement, PlayerAchievement

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π ---
# –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ —É—Å–ª–æ–≤–∏–π –∏—Ö –ø–æ–ª—É—á–µ–Ω–∏—è.
# –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å.
ACHIEVEMENT_CONDITIONS = [
    {
        "name": "–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞",
        "description": "–ü–æ–±–µ–¥–∏—Ç–µ –≤ –∏–≥—Ä–µ –≤–ø–µ—Ä–≤—ã–µ.",
        "condition": lambda p: p.wins == 1,
        "icon": "üèÖ"
    },
    {
        "name": "–í–µ—Ç–µ—Ä–∞–Ω –ë—É–Ω–∫–µ—Ä–∞",
        "description": "–ü—Ä–∏–º–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ 5 –∏–≥—Ä–∞—Ö.",
        "condition": lambda p: (p.wins + p.losses) >= 5,
        "icon": "üéñÔ∏è"
    },
    {
        "name": "–õ–µ–≥–µ–Ω–¥–∞ –ë—É–Ω–∫–µ—Ä–∞",
        "description": "–ü–æ–±–µ–¥–∏—Ç–µ –≤ 10 –∏–≥—Ä–∞—Ö.",
        "condition": lambda p: p.wins >= 10,
        "icon": "üèÜ"
    },
    # --- –ú–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π ---
    # {
    #     "name": "–ù–µ–ø–æ–±–µ–¥–∏–º—ã–π",
    #     "description": "–í—ã–∏–≥—Ä–∞–π—Ç–µ 3 –∏–≥—Ä—ã –ø–æ–¥—Ä—è–¥ (–ø–æ—Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –º–æ–¥–µ–ª–∏ Player).",
    #     "condition": lambda p: p.win_streak == 3,
    #     "icon": "üî•"
    # },
]

def award_new_achievements(bot: TeleBot, player: Player, session: Session) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –∏–≥—Ä–æ–∫—É –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
        player: –û–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
        session: –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
    """
    try:
        newly_awarded = _check_player_achievements(player, session)

        if not newly_awarded:
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
        session.add_all(newly_awarded)
        session.commit()
        logging.info(f"–ò–≥—Ä–æ–∫—É {player.username} ({player.id}) –ø—Ä–∏—Å–≤–æ–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {[ach.achievement.name for ach in newly_awarded]}.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É
        for player_achievement in newly_awarded:
            achievement = player_achievement.achievement
            icon = next((item['icon'] for item in ACHIEVEMENT_CONDITIONS if item['name'] == achievement.name), '‚ú®')
            message = f"{icon} –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: <b>{achievement.name}</b>!\n<i>{achievement.description}</i>"
            bot.send_message(player.telegram_id, message, parse_mode='HTML')

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–ª–∏ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player.id}: {e}", exc_info=True)
        session.rollback()


def _check_player_achievements(player: Player, session: Session) -> List[PlayerAchievement]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö, –µ—â–µ –Ω–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.
    –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î, —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç—ã.
    
    Args:
        player: –û–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
        session: –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.

    Returns:
        –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ PlayerAchievement, –≥–æ—Ç–æ–≤—ã—Ö –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤ —Å–µ—Å—Å–∏—é.
    """
    # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–≥—Ä–æ–∫–∞ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    player_achievement_ids = {
        ach.achievement_id for ach in player.achievements
    }

    # 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    all_achievements = {ach.name: ach for ach in session.query(Achievement).all()}
    
    newly_awarded = []

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤ –∫–æ–¥–µ, –º–∏–Ω–∏–º–∏–∑–∏—Ä—É—è –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î
    for config in ACHIEVEMENT_CONDITIONS:
        achievement_name = config["name"]
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–µ—Ç –≤ –ë–î
        if achievement_name not in all_achievements:
            logging.warning(f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ '{achievement_name}' –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            continue
            
        achievement = all_achievements[achievement_name]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ —É–∂–µ —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ —É—Å–ª–æ–≤–∏–µ
        if achievement.id not in player_achievement_ids and config["condition"](player):
            new_player_achievement = PlayerAchievement(
                player_id=player.id,
                achievement_id=achievement.id
            )
            newly_awarded.append(new_player_achievement)
            # –î–æ–±–∞–≤–ª—è–µ–º ID –≤ —Å–µ—Ç, —á—Ç–æ–±—ã –Ω–µ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –¥–≤–∞–∂–¥—ã –≤ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏
            player_achievement_ids.add(achievement.id)

    return newly_awarded