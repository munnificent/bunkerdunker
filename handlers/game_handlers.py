# handlers/game_handlers.py

from database import Session
from models import Player, Room, Characteristic, Vote, Location, Achievement, PlayerAchievement
from utils.game_utils import (
    get_random_event
)
from utils.markup_utils import create_voting_buttons
from utils.achievement_utils import check_and_award_achievements
from telebot.types import Message
import logging

def handle_show_status(bot, message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /show_status")
    session = Session()
    try:
        telegram_id = message.from_user.id
        player = session.query(Player).filter_by(telegram_id=telegram_id).first()
        if not player:
            bot.send_message(message.chat.id, "‚ùó –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
            return

        characteristics = session.query(Characteristic).filter_by(player_id=player.id).first()
        if not characteristics:
            bot.send_message(message.chat.id, "‚ùó –£ –≤–∞—Å –Ω–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.")
            return

        char_text = f"""
<b>–í–∞—à–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>
üë§ <b>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:</b> {characteristics.profession}
üß¨ <b>–ë–∏–æ–ª–æ–≥–∏—è:</b> {characteristics.biology}
‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ:</b> {characteristics.health}
üé® <b>–•–æ–±–±–∏:</b> {characteristics.hobby}
üéí <b>–ë–∞–≥–∞–∂:</b> {characteristics.luggage}
üìú <b>–§–∞–∫—Ç:</b> {characteristics.facts}
üò± <b>–§–æ–±–∏—è:</b> {characteristics.phobia}
‚ú® <b>–¢–∞–ª–∞–Ω—Ç:</b> {characteristics.talent}
üè∑Ô∏è <b>–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:</b> {characteristics.social_status}
"""
        bot.send_message(message.chat.id, char_text, parse_mode='HTML')
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_show_status: {e}")
    finally:
        session.close()

def handle_leave_room(bot, message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /leave_room")
    session = Session()
    try:
        telegram_id = message.from_user.id
        player = session.query(Player).filter_by(telegram_id=telegram_id).first()

        if not player or not player.current_room_id:
            bot.send_message(message.chat.id, "‚ùó –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ.")
            return

        room = session.query(Room).filter_by(id=player.current_room_id).first()
        room.players.remove(player)
        player.current_room_id = None

        # –£–¥–∞–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
        characteristics = session.query(Characteristic).filter_by(player_id=player.id).first()
        if characteristics:
            session.delete(characteristics)

        session.commit()

        bot.send_message(message.chat.id, "üö™ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–Ω–∞—Ç—É.")
        for p in room.players:
            bot.send_message(p.telegram_id, f"üë§ –ò–≥—Ä–æ–∫ <b>{player.username}</b> –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É.", parse_mode='HTML')
    except Exception as e:
        session.rollback()
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã.")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_leave_room: {e}")
    finally:
        session.close()

def handle_rating(bot, message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /rating")
    session = Session()
    try:
        telegram_id = message.from_user.id
        player = session.query(Player).filter_by(telegram_id=telegram_id).first()
        if not player:
            bot.send_message(message.chat.id, "‚ùó –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
            return
        rating_text = f"""
<b>–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥:</b>
üèÜ <b>–ü–æ–±–µ–¥:</b> {player.wins}
üíÄ <b>–ü–æ—Ä–∞–∂–µ–Ω–∏–π:</b> {player.losses}
"""
        bot.send_message(message.chat.id, rating_text, parse_mode='HTML')
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞.")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_rating: {e}")
    finally:
        session.close()

def handle_achievements(bot, message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /achievements")
    session = Session()
    try:
        telegram_id = message.from_user.id
        player = session.query(Player).filter_by(telegram_id=telegram_id).first()
        if not player:
            bot.send_message(message.chat.id, "‚ùó –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
            return

        achievements = session.query(PlayerAchievement).filter_by(player_id=player.id).all()
        if not achievements:
            bot.send_message(message.chat.id, "üéñÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.")
            return

        achievement_texts = []
        for pa in achievements:
            achievement = session.query(Achievement).filter_by(id=pa.achievement_id).first()
            if achievement:
                achievement_texts.append(f"üèÖ <b>{achievement.name}</b>: {achievement.description}")

        text = "<b>–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n" + "\n".join(achievement_texts)
        bot.send_message(message.chat.id, text, parse_mode='HTML')
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_achievements: {e}")
    finally:
        session.close()
