# handlers/chat_handlers.py

import logging
from functools import wraps
from typing import List

from sqlalchemy.orm import Session
from telebot import TeleBot
from telebot.types import Message, APIError

from database import Session as DbSession
from models import Player, Room, Message as MessageModel

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã ---

def player_in_room_required(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ.
    - –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏–µ–π –ë–î (commit, rollback, close).
    - –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–≥—Ä–æ–∫–∞ –∏ –∫–æ–º–Ω–∞—Ç—ã.
    - –ü–µ—Ä–µ–¥–∞–µ—Ç –≤ —Ñ—É–Ω–∫—Ü–∏—é bot, message, session, player –∏ room.
    """
    @wraps(func)
    def wrapper(bot: TeleBot, message: Message, *args, **kwargs):
        session = DbSession()
        try:
            player = session.query(Player).filter_by(telegram_id=message.from_user.id).first()

            if not player:
                bot.send_message(message.chat.id, "‚ùó –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
                return

            if not player.current_room_id:
                bot.send_message(message.chat.id, "‚ùó –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ.")
                return
            
            room = session.query(Room).filter_by(id=player.current_room_id, is_active=True).first()

            if not room:
                 bot.send_message(message.chat.id, "‚ùó –ö–æ–º–Ω–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –±—ã–ª–∏, –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
                 player.current_room_id = None
                 session.commit()
                 return
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            result = func(bot, message, session, player, room, *args, **kwargs)
            session.commit()
            return result

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ –∏–≥—Ä–æ–∫–∞ '{func.__name__}': {e}", exc_info=True)
            session.rollback()
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")
        finally:
            session.close()

    return wrapper

def _broadcast_to_room(bot: TeleBot, sender: Player, room: Room, text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ, –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è."""
    full_message = f"üí¨ <b>{sender.username}:</b> {text}"
    for p in room.players:
        if p.id != sender.id:
            try:
                bot.send_message(p.telegram_id, full_message, parse_mode='HTML')
            except APIError as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É {p.id} ({p.username}): {e}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@player_in_room_required
def handle_send_message(bot: TeleBot, message: Message, session: Session, player: Player, room: Room):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /msg –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ.
    """
    logging.info(f"–ò–≥—Ä–æ–∫ {player.username} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É {room.code}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç—Å–µ–∫–∞—è —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É
    text = message.text.partition(' ')[2]
    if not text:
        bot.send_message(message.chat.id, "‚ùó –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /msg –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
    new_message = MessageModel(room_id=room.id, sender_id=player.id, content=text)
    session.add(new_message)

    # –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º
    _broadcast_to_room(bot, player, room, text)
    bot.send_message(message.chat.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ.")

@player_in_room_required
def handle_send_private_message(bot: TeleBot, message: Message, session: Session, player: Player, room: Room):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /pm –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É.
    """
    logging.info(f"–ò–≥—Ä–æ–∫ {player.username} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç–µ {room.code}")

    args = message.text.split(' ', 2)
    if len(args) < 3:
        bot.send_message(message.chat.id, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /pm <–∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return

    recipient_username, text = args[1], args[2]

    if recipient_username == player.username:
        bot.send_message(message.chat.id, "‚ùó –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ.")
        return

    # –ò—â–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ —Ç–æ–π –∂–µ –∫–æ–º–Ω–∞—Ç–µ
    recipient = next((p for p in room.players if p.username == recipient_username), None)
    if not recipient:
        bot.send_message(message.chat.id, f"‚ùó –ò–≥—Ä–æ–∫ —Å –∏–º–µ–Ω–µ–º <b>{recipient_username}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç–µ.", parse_mode='HTML')
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
    new_message = MessageModel(
        room_id=room.id,
        sender_id=player.id,
        recipient_id=recipient.id,
        content=text
    )
    session.add(new_message)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        private_text = f"üîí <b>–ü—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {player.username}:</b> {text}"
        bot.send_message(recipient.telegram_id, private_text, parse_mode='HTML')
        bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è <b>{recipient_username}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", parse_mode='HTML')
    except APIError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {player.username} –∫ {recipient.username}: {e}")
        bot.send_message(message.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É <b>{recipient_username}</b>. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.", parse_mode='HTML')