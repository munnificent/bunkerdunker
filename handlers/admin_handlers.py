# handlers/admin_handlers.py

from database import Session
from models import Player, Room, Vote, Characteristic, Location, Achievement, PlayerAchievement
from utils.game_utils import (
    assign_characteristics_to_player,
    generate_location,
    get_random_event,
    get_random_ending
)
from utils.markup_utils import create_voting_buttons
from utils.achievement_utils import check_and_award_achievements
import threading
import time
import logging

def handle_start_game(bot, message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start_game")
    session = Session()
    try:
        telegram_id = message.from_user.id
        player = session.query(Player).filter_by(telegram_id=telegram_id).first()
        if not player:
            bot.send_message(message.chat.id, "‚ùó –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
            return

        room = session.query(Room).filter_by(id=player.current_room_id).first()
        if not room or room.host_id != player.id:
            bot.send_message(message.chat.id, "‚ùó –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Ö–æ—Å—Ç–æ–º –∫–æ–º–Ω–∞—Ç—ã.")
            return

        if len(room.players) < 2:
            bot.send_message(message.chat.id, "‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")
            return

        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞–º
        for p in room.players:
            assign_characteristics_to_player(p)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–æ–∫–∞—Ü–∏—é
        location = generate_location()
        room.location_id = location.id
        session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞–º
        for p in room.players:
            characteristics = session.query(Characteristic).filter_by(player_id=p.id).first()
            char_text = f"""
<b>–í–∞—à–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>
üë§ <b>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:</b> {characteristics.profession}
üß¨ <b>–ë–∏–æ–ª–æ–≥–∏—è:</b> {characteristics.biology}
‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ:</b> {characteristics.health}
üé® <b>–•–æ–±–±–∏:</b> {characteristics.hobby}
üéí <b>–ë–∞–≥–∞–∂:</b> {characteristics.luggage}
üìú <b>–§–∞–∫—Ç:</b> {characteristics.facts}
üò± <b>–§–æ–±–∏—è:</b> {characteristics.phobia}
‚ú® <b>–¢–∞–ª–∞–Ω—Ç:</b> {characteristics.talent}
üè∑Ô∏è <b>–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:</b> {characteristics.social_status}
"""
            bot.send_message(p.telegram_id, char_text, parse_mode='HTML')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏–∏
        location = session.query(Location).filter_by(id=room.location_id).first()
        location_text = f"""
<b>–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã:</b>
{location.description}

<b>–£—Å–ª–æ–≤–∏—è –¥–ª—è –≤—ã–∂–∏–≤–∞–Ω–∏—è:</b>
{location.survival_conditions}
"""
        for p in room.players:
            bot.send_message(p.telegram_id, location_text, parse_mode='HTML')

        bot.send_message(message.chat.id, "üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_discussion –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è.")
    except Exception as e:
        session.rollback()
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã.")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_start_game: {e}")
    finally:
        session.close()

def handle_kick_player(bot, message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /kick")
    session = Session()
    try:
        telegram_id = message.from_user.id
        player = session.query(Player).filter_by(telegram_id=telegram_id).first()

        if not player:
            bot.send_message(message.chat.id, "‚ùó –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
            return

        room = session.query(Room).filter_by(id=player.current_room_id).first()
        if not room or room.host_id != player.id:
            bot.send_message(message.chat.id, "‚ùó –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Ö–æ—Å—Ç–æ–º –∫–æ–º–Ω–∞—Ç—ã.")
            return

        try:
            username = message.text.split()[1]
        except IndexError:
            bot.send_message(message.chat.id, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è.")
            return

        kicked_player = session.query(Player).filter_by(username=username).first()
        if not kicked_player or kicked_player not in room.players:
            bot.send_message(message.chat.id, "‚ùó –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ.")
            return

        room.players.remove(kicked_player)
        kicked_player.current_room_id = None

        # –£–¥–∞–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        characteristics = session.query(Characteristic).filter_by(player_id=kicked_player.id).first()
        if characteristics:
            session.delete(characteristics)

        session.commit()

        bot.send_message(message.chat.id, f"üö´ –ò–≥—Ä–æ–∫ <b>{username}</b> –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∫–æ–º–Ω–∞—Ç—ã.", parse_mode='HTML')
        bot.send_message(kicked_player.telegram_id, "‚ùó –í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∫–æ–º–Ω–∞—Ç—ã.")
    except Exception as e:
        session.rollback()
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞.")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_kick_player: {e}")
    finally:
        session.close()

def handle_stop_game(bot, message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /stop_game")
    session = Session()
    try:
        telegram_id = message.from_user.id
        player = session.query(Player).filter_by(telegram_id=telegram_id).first()

        if not player:
            bot.send_message(message.chat.id, "‚ùó –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
            return

        room = session.query(Room).filter_by(id=player.current_room_id).first()
        if not room or room.host_id != player.id:
            bot.send_message(message.chat.id, "‚ùó –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Ö–æ—Å—Ç–æ–º –∫–æ–º–Ω–∞—Ç—ã.")
            return

        room.is_active = False
        session.commit()

        bot.send_message(message.chat.id, "‚õî –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
        for p in room.players:
            try:
                p.current_room_id = None

                # –£–¥–∞–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
                characteristics = session.query(Characteristic).filter_by(player_id=p.id).first()
                if characteristics:
                    session.delete(characteristics)

                session.commit()
                bot.send_message(p.telegram_id, "‚ùó –ò–≥—Ä–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ö–æ—Å—Ç–æ–º. –í–∞—à–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã.")
            except Exception as e:
                session.rollback()
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {p.telegram_id}: {e}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ—Å—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–µ
                bot.send_message(message.chat.id, f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {p.username}.")

    except Exception as e:
        session.rollback()
        bot.send_message(message.chat.id, "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã.")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_stop_game: {e}")
    finally:
        session.close()


def handle_start_discussion(bot, message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start_discussion")
    session = Session()
    try:
        telegram_id = message.from_user.id
        player = session.query(Player).filter_by(telegram_id=telegram_id).first()

        if not player:
            bot.send_message(message.chat.id, "‚ùó –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
            return

        room = session.query(Room).filter_by(id=player.current_room_id).first()
        if not room or room.host_id != player.id:
            bot.send_message(message.chat.id, "‚ùó –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Ö–æ—Å—Ç–æ–º –∫–æ–º–Ω–∞—Ç—ã.")
            return

        room.is_voting = False
        session.commit()

        for p in room.players:
            bot.send_message(p.telegram_id, "üí¨ –û–±—Å—É–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å! –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Å—É–∂–¥–∞—Ç—å —Å–≤–æ–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.")
    except Exception as e:
        session.rollback()
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è.")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_start_discussion: {e}")
    finally:
        session.close()

def handle_end_discussion(bot, message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /end_discussion")
    session = Session()
    try:
        telegram_id = message.from_user.id
        player = session.query(Player).filter_by(telegram_id=telegram_id).first()

        if not player:
            bot.send_message(message.chat.id, "‚ùó –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
            return

        room = session.query(Room).filter_by(id=player.current_room_id).first()
        if not room or room.host_id != player.id:
            bot.send_message(message.chat.id, "‚ùó –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Ö–æ—Å—Ç–æ–º –∫–æ–º–Ω–∞—Ç—ã.")
            return

        room.is_voting = True
        session.commit()

        for p in room.players:
            bot.send_message(p.telegram_id, "üó≥Ô∏è –û–±—Å—É–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.")
            handle_vote_command(bot, p.telegram_id)
    except Exception as e:
        session.rollback()
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è.")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_end_discussion: {e}")
    finally:
        session.close()

def handle_vote_command(bot, chat_id):
    session = Session()
    try:
        voter = session.query(Player).filter_by(telegram_id=chat_id).first()
        if not voter:
            bot.send_message(chat_id, "‚ùó –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
            return

        room = session.query(Room).filter_by(id=voter.current_room_id).first()
        if not room:
            bot.send_message(chat_id, "‚ùó –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ.")
            return

        if not room.is_voting:
            bot.send_message(chat_id, "‚ùó –°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
            return

        existing_vote = session.query(Vote).filter_by(room_id=room.id, voter_id=voter.id).first()
        if existing_vote:
            bot.send_message(chat_id, "‚ùó –í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏.")
            return

        players_in_room = [p for p in room.players if p.telegram_id != voter.telegram_id]
        markup = create_voting_buttons(players_in_room)
        bot.send_message(chat_id, "üó≥Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è:", reply_markup=markup)
    except Exception as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_vote_command: {e}")
    finally:
        session.close()

def handle_vote_callback(bot, call):
    session = Session()
    try:
        voter_id = call.from_user.id
        voted_player_telegram_id = int(call.data.split('_')[1])

        voter = session.query(Player).filter_by(telegram_id=voter_id).first()
        if not voter:
            bot.answer_callback_query(call.id, "‚ùó –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return

        room = session.query(Room).filter_by(id=voter.current_room_id).first()
        if not room or not room.is_voting:
            bot.answer_callback_query(call.id, "‚ùó –°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
            return

        existing_vote = session.query(Vote).filter_by(room_id=room.id, voter_id=voter.id).first()
        if existing_vote:
            bot.answer_callback_query(call.id, "‚ùó –í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!")
            return

        voted_player = session.query(Player).filter_by(telegram_id=voted_player_telegram_id).first()
        if not voted_player:
            bot.answer_callback_query(call.id, "‚ùó –í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        vote = Vote(room_id=room.id, voter_id=voter.id, voted_player_id=voted_player.id)
        session.add(vote)
        session.commit()

        bot.answer_callback_query(call.id, "‚úÖ –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!")

        total_votes = session.query(Vote).filter_by(room_id=room.id).count()
        total_players = len(room.players)

        if total_votes == total_players:
            handle_vote_results(bot, room)
    except Exception as e:
        session.rollback()
        bot.answer_callback_query(call.id, "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏.")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_vote_callback: {e}")
    finally:
        session.close()

# handlers/admin_handlers.py



def handle_vote_results(bot, room):
    session = Session()
    try:
        votes = session.query(Vote).filter_by(room_id=room.id).all()
        vote_counts = {}
        for vote in votes:
            vote_counts[vote.voted_player_id] = vote_counts.get(vote.voted_player_id, 0) + 1

        max_votes = max(vote_counts.values())
        players_with_max_votes = [pid for pid, count in vote_counts.items() if count == max_votes]

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ö–æ—Å—Ç–∞
        host = session.query(Player).filter_by(id=room.host_id).first()

        if len(players_with_max_votes) > 1:
            if host:
                bot.send_message(host.telegram_id, "‚öñÔ∏è –ù–∏—á—å—è –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å.")
            session.query(Vote).filter_by(room_id=room.id).delete()
            session.commit()
            for player in room.players:
                bot.send_message(player.telegram_id, "üó≥Ô∏è –ü–µ—Ä–µ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!")
                handle_vote_command(bot, player.telegram_id)
            return

        excluded_player_id = players_with_max_votes[0]
        excluded_player = session.query(Player).filter_by(id=excluded_player_id).first()

        if excluded_player:
            # –ò—â–µ–º –æ–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ room.players
            player_in_room = next((p for p in room.players if p.id == excluded_player.id), None)
            if player_in_room:
                room.players.remove(player_in_room)
                excluded_player.current_room_id = None

                # –£–¥–∞–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                characteristics = session.query(Characteristic).filter_by(player_id=excluded_player.id).first()
                if characteristics:
                    session.delete(characteristics)

                session.commit()

                for player in room.players:
                    bot.send_message(player.telegram_id, f"üö´ –ò–≥—Ä–æ–∫ <b>{excluded_player.username}</b> –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –±—É–Ω–∫–µ—Ä–∞.", parse_mode='HTML')
                bot.send_message(excluded_player.telegram_id, "‚ùó –í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –±—É–Ω–∫–µ—Ä–∞.")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–º
                characteristics_text = f"""
<b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ {excluded_player.username}:</b>
üë§ <b>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:</b> {characteristics.profession}
üß¨ <b>–ë–∏–æ–ª–æ–≥–∏—è:</b> {characteristics.biology}
‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ:</b> {characteristics.health}
üé® <b>–•–æ–±–±–∏:</b> {characteristics.hobby}
üéí <b>–ë–∞–≥–∞–∂:</b> {characteristics.luggage}
üìú <b>–§–∞–∫—Ç:</b> {characteristics.facts}
üò± <b>–§–æ–±–∏—è:</b> {characteristics.phobia}
‚ú® <b>–¢–∞–ª–∞–Ω—Ç:</b> {characteristics.talent}
üè∑Ô∏è <b>–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:</b> {characteristics.social_status}
"""
                for player in room.players:
                    bot.send_message(player.telegram_id, characteristics_text, parse_mode='HTML')

                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≥–æ–ª–æ—Å–∞
                session.query(Vote).filter_by(room_id=room.id).delete()
                session.commit()

                if len(room.players) <= room.survivors:
                    end_game(bot, room)
                else:
                    trigger_random_event(bot, room)
                    if host:
                        bot.send_message(host.telegram_id, "üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_discussion –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è.")
            else:
                logging.error(f"–ò–≥—Ä–æ–∫ —Å id {excluded_player.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ {room.id}")
                bot.send_message(room.host_id, f"‚ùó –ò–≥—Ä–æ–∫ —Å id {excluded_player.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ.")
        else:
            logging.error(f"–ò–≥—Ä–æ–∫ —Å id {excluded_player_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            bot.send_message(room.host_id, f"‚ùó –ò–≥—Ä–æ–∫ —Å id {excluded_player_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        session.rollback()
        if host:
            bot.send_message(host.telegram_id, "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_vote_results: {e}")
    finally:
        session.close()


def end_game(bot, room):
    session = Session()
    try:
        survivors_needed = room.survivors
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–∂–∏–≤—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ (–æ—Å—Ç–∞–ª—å–Ω—ã–µ - –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ)
        survivors = room.players.copy()  # –ö–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
        winner_usernames = [player.username for player in survivors]
        winners_text = "üéâ <b>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n<b>–í—ã–∂–∏–≤—à–∏–µ –∏–≥—Ä–æ–∫–∏:</b>\n" + "\n".join(winner_usernames)
        
        for player in survivors:
            bot.send_message(player.telegram_id, winners_text, parse_mode='HTML')
            player.wins += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥
            player.current_room_id = None

            # –£–¥–∞–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
            characteristics = session.query(Characteristic).filter_by(player_id=player.id).first()
            if characteristics:
                session.delete(characteristics)

            session.commit()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            check_and_award_achievements(bot, player)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        excluded_players = session.query(Player).filter(Player.current_room_id == room.id).all()
        losers_usernames = [player.username for player in excluded_players]
        losers_text = "<b>–ü–æ—Ä–∞–∂–µ–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:</b>\n" + "\n".join(losers_usernames) if losers_usernames else ""
        
        for player in excluded_players:
            player.losses += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä–∞–∂–µ–Ω–∏–π
            player.current_room_id = None

            # –£–¥–∞–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
            characteristics = session.query(Characteristic).filter_by(player_id=player.id).first()
            if characteristics:
                session.delete(characteristics)

            session.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–º—É (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
            bot.send_message(player.telegram_id, "‚ùó –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤ –∏–≥—Ä–µ.", parse_mode='HTML')

        room.is_active = False
        session.commit()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–æ–Ω—Ü–æ–≤–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞–º
        ending = get_random_ending()
        for player in survivors:
            bot.send_message(player.telegram_id, f"üèÅ <b>–ö–æ–Ω—Ü–æ–≤–∫–∞ –∏–≥—Ä—ã:</b>\n{ending}", parse_mode='HTML')
    except Exception as e:
        session.rollback()
        host = session.query(Player).filter_by(id=room.host_id).first()
        if host:
            bot.send_message(host.telegram_id, "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã.")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ end_game: {e}")
    finally:
        session.close()

def handle_timer(bot, message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /timer")
    session = Session()
    try:
        telegram_id = message.from_user.id
        player = session.query(Player).filter_by(telegram_id=telegram_id).first()

        if not player:
            bot.send_message(message.chat.id, "‚ùó –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
            return

        room = session.query(Room).filter_by(id=player.current_room_id).first()
        if not room or room.host_id != player.id:
            bot.send_message(message.chat.id, "‚ùó –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Ö–æ—Å—Ç–æ–º –∫–æ–º–Ω–∞—Ç—ã.")
            return

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã /timer, –æ–∂–∏–¥–∞–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç
        try:
            args = message.text.split()
            if len(args) != 2:
                bot.send_message(message.chat.id, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Ç–∞–π–º–µ—Ä–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö.\n–ü—Ä–∏–º–µ—Ä: /timer 10")
                return
            timer_minutes = int(args[1])
            if timer_minutes <= 0:
                bot.send_message(message.chat.id, "‚ùó –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return
        except ValueError:
            bot.send_message(message.chat.id, "‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.\n–ü—Ä–∏–º–µ—Ä: /timer 10")
            return

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ —Ç–∞–π–º–µ—Ä–∞
        for p in room.players:
            try:
                bot.send_message(p.telegram_id, f"‚è∞ –¢–∞–π–º–µ—Ä –Ω–∞ {timer_minutes} –º–∏–Ω—É—Ç –∑–∞–ø—É—â–µ–Ω —Ö–æ—Å—Ç–æ–º.")
            except ApiException as api_e:
                logging.error(f"API –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {p.telegram_id}: {api_e}")
                bot.send_message(message.chat.id, f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {p.username}.")
            except Exception as e:
                logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {p.telegram_id}: {e}")
                bot.send_message(message.chat.id, f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {p.username}.")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç—Å—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        timer_thread = threading.Thread(target=timer_countdown, args=(bot, room.id, timer_minutes))
        timer_thread.start()

        bot.send_message(message.chat.id, f"‚è∞ –¢–∞–π–º–µ—Ä –Ω–∞ {timer_minutes} –º–∏–Ω—É—Ç –∑–∞–ø—É—â–µ–Ω.")
    except Exception as e:
        session.rollback()
        bot.send_message(message.chat.id, "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–∞–π–º–µ—Ä–∞.")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_timer: {e}")
    finally:
        session.close()

def timer_countdown(bot, room_id, minutes):
    try:
        time.sleep(minutes * 60)  # –ñ–¥—ë–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç

        session = Session()
        room = session.query(Room).filter_by(id=room_id).first()
        if not room or not room.is_active:
            session.close()
            return

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞
        for p in room.players:
            try:
                bot.send_message(p.telegram_id, f"‚è∞ –¢–∞–π–º–µ—Ä –Ω–∞ {minutes} –º–∏–Ω—É—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
            except ApiException as api_e:
                logging.error(f"API –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {p.telegram_id}: {api_e}")
            except Exception as e:
                logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {p.telegram_id}: {e}")

        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏–ª–∏ –Ω–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è:
        room.is_voting = True
        session.commit()

        for p in room.players:
            try:
                bot.send_message(p.telegram_id, "üó≥Ô∏è –í—Ä–µ–º—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.", parse_mode='HTML')
            except ApiException as api_e:
                logging.error(f"API –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {p.telegram_id}: {api_e}")
            except Exception as e:
                logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {p.telegram_id}: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        from handlers.admin_handlers import handle_vote_command  # –ò–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        for p in room.players:
            handle_vote_command(bot, p.telegram_id)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ timer_countdown: {e}")
         
def trigger_random_event(bot, room):
    event = get_random_event()
    for player in room.players:
        bot.send_message(player.telegram_id, f"üîî <b>–°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ:</b>\n{event}", parse_mode='HTML')
