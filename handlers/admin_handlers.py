# handlers/admin_handlers.py

import logging
import threading
import time
from functools import wraps
from typing import List

from sqlalchemy.orm import Session
from telebot import TeleBot
from telebot.types import Message, CallbackQuery

from database import Session as DbSession
from models import Player, Room, Vote, Characteristic
from utils.achievement_utils import award_new_achievements
from utils.game_utils import (
    assign_new_characteristics_to_player,
    get_random_location,
    get_random_event,
    get_random_ending,
)
from utils.markup_utils import create_voting_buttons, CB_VOTE_PREFIX

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã ---

def host_required(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Å—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã.
    - –°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –ë–î –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –µ—é (commit, rollback, close).
    - –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.
    - –ü–µ—Ä–µ–¥–∞–µ—Ç –≤ —Ñ—É–Ω–∫—Ü–∏—é bot, message, session, player –∏ room.
    """
    @wraps(func)
    def wrapper(bot: TeleBot, message: Message, *args, **kwargs):
        session = DbSession()
        try:
            player = session.query(Player).filter_by(telegram_id=message.from_user.id).first()

            if not player:
                bot.send_message(message.chat.id, "‚ùó –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
                return

            if not player.current_room_id:
                bot.send_message(message.chat.id, "‚ùó –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ.")
                return
            
            room = session.query(Room).filter_by(id=player.current_room_id).first()

            if not room:
                 bot.send_message(message.chat.id, "‚ùó –ö–æ–º–Ω–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –±—ã–ª–∏, –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                 player.current_room_id = None
                 session.commit()
                 return

            if room.host_id != player.id:
                bot.send_message(message.chat.id, "‚ùó –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ö–æ—Å—Ç –∫–æ–º–Ω–∞—Ç—ã.")
                return
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –Ω—É–∂–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
            result = func(bot, message, session, player, room, *args, **kwargs)
            session.commit()
            return result

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ —Ö–æ—Å—Ç–∞ '{func.__name__}': {e}", exc_info=True)
            session.rollback()
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")
        finally:
            session.close()

    return wrapper

def _broadcast_message(bot: TeleBot, players: List[Player], text: str, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –∏–∑ —Å–ø–∏—Å–∫–∞."""
    for p in players:
        try:
            bot.send_message(p.telegram_id, text, **kwargs)
        except Exception as e: # <-- –ó–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ –æ–±—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É {p.id} ({p.username}): {e}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@host_required
def handle_start_game(bot: TeleBot, message: Message, session: Session, player: Player, room: Room):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É, —Ä–∞–∑–¥–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –æ–±—ä—è–≤–ª—è–µ—Ç –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—É."""
    logging.info(f"–•–æ—Å—Ç {player.username} ({player.id}) –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É –≤ –∫–æ–º–Ω–∞—Ç–µ {room.code}.")
    
    if len(room.players) < 2:
        bot.send_message(message.chat.id, "‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã (–º–∏–Ω–∏–º—É–º 2).")
        return

    # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–æ–∫–∞—Ü–∏—é
    for p in room.players:
        assign_new_characteristics_to_player(session, p)
    
    room.location = get_random_location(session)
    if not room.location:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–≥—Ä–æ–∫–∞–º
    _send_initial_game_info(bot, room)
    
    bot.send_message(message.chat.id, "üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_discussion, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ.")

def _send_initial_game_info(bot: TeleBot, room: Room):
    """–†–∞—Å—Å—ã–ª–∞–µ—Ç –∏–≥—Ä–æ–∫–∞–º –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–µ."""
    location_text = (
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã:</b>\n{room.location.description}\n\n"
        f"<b>–£—Å–ª–æ–≤–∏—è –¥–ª—è –≤—ã–∂–∏–≤–∞–Ω–∏—è:</b>\n{room.location.survival_conditions}"
    )
    
    for p in room.players:
        char_text = (
            f"<b>–í–∞—à–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n"
            f"üë§ <b>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:</b> {p.characteristics.profession}\n"
            f"üß¨ <b>–ë–∏–æ–ª–æ–≥–∏—è:</b> {p.characteristics.biology}\n"
            f"‚ù§Ô∏è <b>–ó–¥–æ—Ä–æ–≤—å–µ:</b> {p.characteristics.health}\n"
            f"üé® <b>–•–æ–±–±–∏:</b> {p.characteristics.hobby}\n"
            f"üéí <b>–ë–∞–≥–∞–∂:</b> {p.characteristics.luggage}\n"
            f"üìú <b>–§–∞–∫—Ç:</b> {p.characteristics.facts}\n"
            f"üò± <b>–§–æ–±–∏—è:</b> {p.characteristics.phobia}\n"
            f"‚ú® <b>–¢–∞–ª–∞–Ω—Ç:</b> {p.characteristics.talent}\n"
            f"üè∑Ô∏è <b>–°–æ—Ü. —Å—Ç–∞—Ç—É—Å:</b> {p.characteristics.social_status}"
        )
        _broadcast_message(bot, [p], char_text, parse_mode='HTML')
        _broadcast_message(bot, [p], location_text, parse_mode='HTML')

@host_required
def handle_kick_player(bot: TeleBot, message: Message, session: Session, player: Player, room: Room):
    """–ò—Å–∫–ª—é—á–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ —Ö–æ—Å—Ç–∞."""
    try:
        username_to_kick = message.text.split()[1]
    except IndexError:
        bot.send_message(message.chat.id, "‚ùó –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /kick <username>")
        return

    player_to_kick = next((p for p in room.players if p.username == username_to_kick), None)

    if not player_to_kick:
        bot.send_message(message.chat.id, f"‚ùó –ò–≥—Ä–æ–∫ —Å –∏–º–µ–Ω–µ–º <b>{username_to_kick}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ.", parse_mode='HTML')
        return
    
    if player_to_kick.id == player.id:
        bot.send_message(message.chat.id, "‚ùó –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
        return

    # –ò—Å–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
    player_to_kick.current_room_id = None
    logging.info(f"–ò–≥—Ä–æ–∫ {player_to_kick.username} –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∫–æ–º–Ω–∞—Ç—ã {room.code} —Ö–æ—Å—Ç–æ–º {player.username}.")
    
    _broadcast_message(bot, room.players, f"üë§ –ò–≥—Ä–æ–∫ <b>{player_to_kick.username}</b> –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω —Ö–æ—Å—Ç–æ–º.", parse_mode='HTML')
    bot.send_message(player_to_kick.telegram_id, "‚ùó –í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∫–æ–º–Ω–∞—Ç—ã —Ö–æ—Å—Ç–æ–º.")

@host_required
def handle_stop_game(bot: TeleBot, message: Message, session: Session, player: Player, room: Room):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É –≤ –∫–æ–º–Ω–∞—Ç–µ."""
    logging.warning(f"–•–æ—Å—Ç {player.username} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –∏–≥—Ä—É –≤ –∫–æ–º–Ω–∞—Ç–µ {room.code}.")
    _cleanup_room(bot, room, "‚õî –ò–≥—Ä–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ö–æ—Å—Ç–æ–º.")

@host_required
def handle_start_discussion(bot: TeleBot, message: Message, session: Session, player: Player, room: Room):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞—É–Ω–¥ –æ–±—Å—É–∂–¥–µ–Ω–∏—è."""
    room.is_voting = False
    _broadcast_message(bot, room.players, "üí¨ –û–±—Å—É–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –∏ —Ä–µ—à–∏—Ç–µ, –∫—Ç–æ –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è.")

@host_required
def handle_end_discussion(bot: TeleBot, message: Message, session: Session, player: Player, room: Room):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞—É–Ω–¥ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ."""
    _start_voting_round(bot, room)

def handle_vote_command(bot: TeleBot, chat_id: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /vote –æ—Ç –∏–≥—Ä–æ–∫–∞."""
    session = DbSession()
    try:
        player = session.query(Player).filter_by(telegram_id=chat_id).first()
        if not player or not player.current_room_id:
            bot.send_message(chat_id, "‚ùó –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ.")
            return

        room = session.query(Room).filter_by(id=player.current_room_id).first()
        if not room.is_voting:
            bot.send_message(chat_id, "‚ùó –°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ
        existing_vote = session.query(Vote).filter_by(room_id=room.id, voter_id=player.id).first()
        if existing_vote:
            bot.send_message(chat_id, "‚ùó –í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ.")
            return
        
        players_to_vote_for = [p for p in room.players if p.id != player.id]
        markup = create_voting_buttons(players_to_vote_for)
        bot.send_message(chat_id, "üó≥Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å:", reply_markup=markup)
    finally:
        session.close()

def handle_vote_callback(bot: TeleBot, call: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è."""
    session = DbSession()
    try:
        voter = session.query(Player).filter_by(telegram_id=call.from_user.id).first()
        if not voter or not voter.current_room_id:
            bot.answer_callback_query(call.id, "‚ùó –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–µ.", show_alert=True)
            return

        room = session.query(Room).filter_by(id=voter.current_room_id).first()
        if not room.is_voting:
            bot.answer_callback_query(call.id, "‚ùó –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ
        if session.query(Vote).filter_by(room_id=room.id, voter_id=voter.id).count() > 0:
            bot.answer_callback_query(call.id, "‚ùó –í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!", show_alert=True)
            return

        voted_player_tid = int(call.data.replace(CB_VOTE_PREFIX, ''))
        voted_player = session.query(Player).filter_by(telegram_id=voted_player_tid).first()

        # –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å
        vote = Vote(room_id=room.id, voter_id=voter.id, voted_player_id=voted_player.id)
        session.add(vote)
        session.commit()
        bot.answer_callback_query(call.id, "‚úÖ –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!")
        bot.edit_message_text("‚úÖ –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!", call.message.chat.id, call.message.message_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
        if session.query(Vote).filter_by(room_id=room.id).count() == len(room.players):
            _handle_vote_results(bot, room, session)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ vote_callback: {e}", exc_info=True)
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞.", show_alert=True)
        session.rollback()
    finally:
        session.close()

def _handle_vote_results(bot: TeleBot, room: Room, session: Session):
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
    votes = session.query(Vote.voted_player_id).filter_by(room_id=room.id).all()
    vote_counts = {pid[0]: votes.count(pid) for pid in set(votes)}
    
    max_votes = max(vote_counts.values())
    players_with_max_votes = [pid for pid, count in vote_counts.items() if count == max_votes]

    # –û—á–∏—â–∞–µ–º –≥–æ–ª–æ—Å–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
    session.query(Vote).filter_by(room_id=room.id).delete()
    
    if len(players_with_max_votes) > 1:
        _broadcast_message(bot, room.players, "‚öñÔ∏è –ù–∏—á—å—è –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏! –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞—É–Ω–¥ –ø–µ—Ä–µ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
        _start_voting_round(bot, room)
        return

    excluded_player = session.query(Player).get(players_with_max_votes[0])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    char_text = f"<b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ {excluded_player.username}:</b>\n" + \
                f"üë§ <b>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:</b> {excluded_player.characteristics.profession}\n" #... –∏ —Ç.–¥.
    _broadcast_message(bot, room.players, char_text, parse_mode='HTML')
    
    excluded_player.current_room_id = None
    _broadcast_message(bot, room.players, f"üö´ –ò–≥—Ä–æ–∫ <b>{excluded_player.username}</b> –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –±—É–Ω–∫–µ—Ä–∞.", parse_mode='HTML')
    bot.send_message(excluded_player.telegram_id, "‚ùó –í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –±—É–Ω–∫–µ—Ä–∞.")

    if len(room.players) <= room.survivors:
        _process_game_end(bot, room, session)
    else:
        _broadcast_message(bot, [room.host], "üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_discussion –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞.")
        trigger_random_event(bot, room)

def _process_game_end(bot: TeleBot, room: Room, session: Session):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã, –Ω–∞—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è."""
    survivors = list(room.players)
    all_players_in_game = session.query(Player).filter(Player.id.in_([p.id for p in survivors])).all() # –ü–µ—Ä–µ–∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
    
    winner_usernames = [p.username for p in survivors]
    winners_text = f"üéâ <b>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n<b>–í—ã–∂–∏–≤—à–∏–µ –∏–≥—Ä–æ–∫–∏:</b>\n" + "\n".join(winner_usernames)
    
    _broadcast_message(bot, survivors, winners_text, parse_mode='HTML')
    _broadcast_message(bot, survivors, get_random_ending(), parse_mode='HTML')

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    for survivor in survivors:
        survivor.wins += 1
        award_new_achievements(bot, survivor, session)
        
    # –ò—â–µ–º –≤—Å–µ—Ö, –∫—Ç–æ –±—ã–ª –≤ –∫–æ–º–Ω–∞—Ç–µ, –Ω–æ –Ω–µ –≤—ã–∂–∏–ª
    losers = session.query(Player).filter(
        Player.current_room_id == room.id, 
        Player.id.notin_([p.id for p in survivors])
    ).all()
    
    for loser in losers:
        loser.losses += 1
        award_new_achievements(bot, loser, session)

    _cleanup_room(bot, room, "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
    
def _cleanup_room(bot: TeleBot, room: Room, final_message: str):
    """–û—á–∏—â–∞–µ—Ç –∫–æ–º–Ω–∞—Ç—É –∏ —Ä–∞—Å–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤."""
    _broadcast_message(bot, room.players, final_message)
    
    for p in list(room.players):
        p.current_room_id = None
        
    room.is_active = False

def _start_voting_round(bot: TeleBot, room: Room):
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è."""
    room.is_voting = True
    _broadcast_message(bot, room.players, "üó≥Ô∏è –û–±—Å—É–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /vote, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–π –≤—ã–±–æ—Ä.")

def trigger_random_event(bot: TeleBot, room: Room):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ."""
    event = get_random_event()
    _broadcast_message(bot, room.players, f"üîî <b>–°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ:</b>\n{event}", parse_mode='HTML')

@host_required
def handle_timer(bot: TeleBot, message: Message, session: Session, player: Player, room: Room):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –æ–±—Å—É–∂–¥–µ–Ω–∏—è."""
    try:
        minutes = int(message.text.split()[1])
        if not 1 <= minutes <= 60:
            raise ValueError
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "‚ùó –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 1 –¥–æ 60). –ü—Ä–∏–º–µ—Ä: /timer 5")
        return

    _broadcast_message(bot, room.players, f"‚è∞ –•–æ—Å—Ç –∑–∞–ø—É—Å—Ç–∏–ª —Ç–∞–π–º–µ—Ä –Ω–∞ {minutes} –º–∏–Ω—É—Ç.")
    
    # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=_timer_countdown, args=(bot, room.id, minutes), daemon=True).start()

def _timer_countdown(bot: TeleBot, room_id: int, minutes: int):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞."""
    time.sleep(minutes * 60)
    session = DbSession()
    try:
        room = session.query(Room).filter_by(id=room_id, is_active=True).first()
        if not room:
            logging.info(f"–¢–∞–π–º–µ—Ä –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_id} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –Ω–æ –∫–æ–º–Ω–∞—Ç–∞ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.")
            return

        _broadcast_message(bot, room.players, f"‚è∞ –í—Ä–µ–º—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è ({minutes} –º–∏–Ω) –∏—Å—Ç–µ–∫–ª–æ!")
        _start_voting_round(bot, room)
        session.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_id}: {e}", exc_info=True)
        session.rollback()
    finally:
        session.close()